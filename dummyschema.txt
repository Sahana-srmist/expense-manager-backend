from prettytable import PrettyTable
from datetime import datetime
import psycopg2

class expense_manager(): 
    def __init__(self):
        # connect to PostgreSQL
        self.conn = psycopg2.connect(
            dbname="expense manager final",
            user="postgres",
            password="Sahana@2006",  # CHANGE THIS
            host="localhost",
            port="5432"
        )
        self.cur = self.conn.cursor()
    def input_expense(self): #core work
        
        print("\nEnter your expenses.\nType 'Complete' to get the summary.\n")
        count=0 # counter to track number of expenses added
        while True:
            reason = input("Enter reason (or 'complete' to end): ")
            if reason.lower() == 'complete':#converts to lowercase
                if count == 0:
                    print("No data entered.")
                else:
                    print("Data added successfully.")
                break

            if not reason.replace(" ", "").isalpha():
                print("Please enter only letters for reason.\n")
                continue
            if len(reason) > 30:
                print("Reason is too long! Please keep it under 30 characters.\n")
                continue

            try:
                amount = float(input("Enter amount: ₹"))
                if amount >= 100000000:
                    print("Amount too large! Please enter an amount less than ₹100000000.\n")
                    continue
                if amount < 0:
                    print("Amount cannot be negative.\n")
                    continue
            except ValueError:
                print("Please enter a valid number.\n")
                continue

            try:
                date_str = input("Enter date (DD/MM/YYYY): ")# 'try' converting the date to check format
                date_obj = datetime.strptime(date_str, "%d/%m/%Y")# converting string to python date format
                
            except ValueError:
                print("Invalid date format. Please enter in DD/MM/YYYY format.\n")
                continue
            self.cur.execute(
                "INSERT INTO expenses (reason, amount, date) VALUES (%s, %s, %s)",#appending in the table
                (reason, amount, date_obj)
            )
            self.conn.commit()#to save changes
            count += 1  # increase count for each saved entry
            print("Saved successfully!\n")

    def display_summary(self):
        self.cur.execute("SELECT * FROM expenses")
        rows = self.cur.fetchall()

        if not rows:
            print("No expenses found.")
            return

        total = 0
        amounts = []
        table = PrettyTable()
        table.field_names = ["S.No.", "Reason", "Amount", "Date"]

        for i, row in enumerate(rows):
            expense_id, reason, amount, date = row
            table.add_row([i + 1, reason, f"₹{amount:.2f}", date.strftime("%d/%m/%Y")])
            amounts.append(amount)
            total += amount

        average = total / len(amounts)
        highest = max(amounts)
        lowest = min(amounts)

        print("\n----------- EXPENSE SUMMARY ----------")
        print(table)
        print(f"\nTotal Expense: ₹{total:.2f}")
        print(f"Average Expense: ₹{average:.2f}")
        print(f"Highest Expense: ₹{highest:.2f}")
        print(f"Lowest Expense: ₹{lowest:.2f}")

    def search_by_reason(self, keyword):
        self.cur.execute("SELECT * FROM expenses WHERE LOWER(reason) = LOWER(%s)", (keyword,))
        rows = self.cur.fetchall()

        if not rows:
            print(f"No expenses found for reason '{keyword}'.")
            return

        total = 0
        table = PrettyTable()
        table.field_names = ["S.No.", "Reason", "Amount", "Date"]

        for i, row in enumerate(rows):
            _, reason, amount, date = row
            table.add_row([i + 1, reason, f"₹{amount:.2f}", date.strftime("%d/%m/%Y")])
            total += amount

        print(f"\nExpenses related to '{keyword}':")
        print(table)
        print(f"\nTotal spent on '{keyword}': ₹{total:.2f}")


    def search_by_date_range(self, start_date, end_date):
        try:
            start = datetime.strptime(start_date, "%d/%m/%Y").date()
            end = datetime.strptime(end_date, "%d/%m/%Y").date()
        except ValueError:
            print("Invalid date format. Please use DD/MM/YYYY.")
            return

        self.cur.execute(
            "SELECT * FROM expenses WHERE date BETWEEN %s AND %s ORDER BY date",
            (start, end)
        )
        rows = self.cur.fetchall()

        if not rows:
            print("No expenses found in the given date range.")
            return

        total = 0
        table = PrettyTable()
        table.field_names = ["S.No.", "Reason", "Amount", "Date"]

        for i, row in enumerate(rows):
            _, reason, amount, date = row
            table.add_row([i + 1, reason, f"₹{amount:.2f}", date.strftime("%d/%m/%Y")])
            total += amount

        print(f"\nExpenses from {start_date} to {end_date}:")
        print(table)
        print(f"\nTotal spent between {start_date} and {end_date}: ₹{total:.2f}")

    def close(self):
        self.cur.close()
        self.conn.close()

    def delete_by_reason(self, reason):
        self.cur.execute("SELECT * FROM expenses WHERE LOWER(reason) = LOWER(%s)", (reason,))
        rows = self.cur.fetchall()

        if not rows:
            print(f"No expenses found with reason '{reason}'.")
            return

        self.cur.execute("DELETE FROM expenses WHERE LOWER(reason) = LOWER(%s)", (reason,))
        self.conn.commit()
        print(f"Deleted all expenses with reason '{reason}'.")

    def delete_all(self):
        self.cur.execute("DELETE FROM expenses")
        self.conn.commit()
        print("All expenses deleted!")


# Main program
manager = expense_manager()

while True:
    print("\n----- EXPENSE MANAGER MENU -----")
    print("1. Add Expense")
    print("2. Show Summary")
    print("3. Search by Reason")
    print("4. Search by Date Range")
    print("5. Delete by Reason")
    print("6. Delete All")
    print("7. Exit")

    choice = input("Enter your choice (1-7): ")

    if choice == "1":
        manager.input_expense()
    elif choice == "2":
        manager.display_summary()
    elif choice == "3":
        keyword = input("Enter reason to search: ")
        manager.search_by_reason(keyword)
    elif choice == "4":
        start = input("Enter start date (DD/MM/YYYY): ")
        end = input("Enter end date (DD/MM/YYYY): ")
        manager.search_by_date_range(start, end)
    elif choice == "5":
        reason = input("Enter reason to delete: ")
        manager.delete_by_reason(reason)
    elif choice == "6":
        confirm = input("Are you sure you want to delete ALL expenses? (yes/no): ")
        if confirm.lower() == "yes":
            manager.delete_all()
    elif choice == "7":
        print("Thank You!")
        manager.close()
        break
    else:
        print("Invalid choice. Please enter a number from 1 to 7.")
